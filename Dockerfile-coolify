# ---- Dockerfile-coolify (production image for Coolify) ----
FROM node:22.8.0

WORKDIR /app

# Helpful defaults for CI builds and bigger bundles
ENV \
  NODE_OPTIONS=--max-old-space-size=4096 \
  CI=true \
  PNPM_HOME=/usr/local/share/pnpm \
  NPM_CONFIG_FUND=false \
  COREPACK_ENABLE_DOWNLOAD_PROMPT=0

# Toolchain for native deps (sharp/canvas/etc.) + jq for debug prints
RUN apt-get update && apt-get install -y --no-install-recommends \
      python3 make g++ ca-certificates git jq \
  && rm -rf /var/lib/apt/lists/*

# Do NOT use Corepack (it caused signature errors); install pnpm explicitly
RUN corepack disable || true \
 && npm install -g pnpm@9.12.2

# Copy only dependency files first for better layer caching
COPY package.json pnpm-lock.yaml ./

# Install deps strictly per lockfile; verbose output for CI logs
# If you hit optional native deps issues, add: --no-optional
RUN pnpm install --frozen-lockfile --reporter=ndjson

# Copy the rest of the project
COPY . .

# Normalize line endings for script and ensure it's executable
RUN if [ -f bindings.sh ]; then \
      tr -d '\r' < bindings.sh > bindings.tmp && \
      mv bindings.tmp bindings.sh && chmod +x bindings.sh; \
    fi

# Optional: show versions in logs to help debugging
RUN node --version && pnpm --version

# Build (capture full log, show last 200 lines on failure, preserve exit code)
RUN bash -lc 'set -euo pipefail; \
  pnpm run build 2>&1 | tee /tmp/build.log; \
  ec=${PIPESTATUS[0]}; \
  if [ $ec -ne 0 ]; then \
    echo "---- BUILD FAILED (exit $ec) â€” last 200 lines ----"; \
    tail -n 200 /tmp/build.log || true; \
    echo "-----------------------------------------------"; \
    exit $ec; \
  fi'

EXPOSE 5173

ENV NODE_ENV=production \
    RUNNING_IN_DOCKER=true

CMD ["pnpm", "run", "dockerstart"]
